/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package nh.weather_reader_kafka.model.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CurrentWeather extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 584506603148195394L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CurrentWeather\",\"namespace\":\"nh.weather_reader_kafka.model.avro\",\"fields\":[{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"temperature\",\"type\":\"double\"},{\"name\":\"windspeed\",\"type\":\"double\"},{\"name\":\"winddirection\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CurrentWeather> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CurrentWeather> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CurrentWeather> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CurrentWeather> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CurrentWeather> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CurrentWeather to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CurrentWeather from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CurrentWeather instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CurrentWeather fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence time;
  private double temperature;
  private double windspeed;
  private int winddirection;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CurrentWeather() {}

  /**
   * All-args constructor.
   * @param time The new value for time
   * @param temperature The new value for temperature
   * @param windspeed The new value for windspeed
   * @param winddirection The new value for winddirection
   */
  public CurrentWeather(java.lang.CharSequence time, java.lang.Double temperature, java.lang.Double windspeed, java.lang.Integer winddirection) {
    this.time = time;
    this.temperature = temperature;
    this.windspeed = windspeed;
    this.winddirection = winddirection;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return time;
    case 1: return temperature;
    case 2: return windspeed;
    case 3: return winddirection;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: time = (java.lang.CharSequence)value$; break;
    case 1: temperature = (java.lang.Double)value$; break;
    case 2: windspeed = (java.lang.Double)value$; break;
    case 3: winddirection = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.lang.CharSequence getTime() {
    return time;
  }


  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.CharSequence value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'temperature' field.
   * @return The value of the 'temperature' field.
   */
  public double getTemperature() {
    return temperature;
  }


  /**
   * Sets the value of the 'temperature' field.
   * @param value the value to set.
   */
  public void setTemperature(double value) {
    this.temperature = value;
  }

  /**
   * Gets the value of the 'windspeed' field.
   * @return The value of the 'windspeed' field.
   */
  public double getWindspeed() {
    return windspeed;
  }


  /**
   * Sets the value of the 'windspeed' field.
   * @param value the value to set.
   */
  public void setWindspeed(double value) {
    this.windspeed = value;
  }

  /**
   * Gets the value of the 'winddirection' field.
   * @return The value of the 'winddirection' field.
   */
  public int getWinddirection() {
    return winddirection;
  }


  /**
   * Sets the value of the 'winddirection' field.
   * @param value the value to set.
   */
  public void setWinddirection(int value) {
    this.winddirection = value;
  }

  /**
   * Creates a new CurrentWeather RecordBuilder.
   * @return A new CurrentWeather RecordBuilder
   */
  public static nh.weather_reader_kafka.model.avro.CurrentWeather.Builder newBuilder() {
    return new nh.weather_reader_kafka.model.avro.CurrentWeather.Builder();
  }

  /**
   * Creates a new CurrentWeather RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CurrentWeather RecordBuilder
   */
  public static nh.weather_reader_kafka.model.avro.CurrentWeather.Builder newBuilder(nh.weather_reader_kafka.model.avro.CurrentWeather.Builder other) {
    if (other == null) {
      return new nh.weather_reader_kafka.model.avro.CurrentWeather.Builder();
    } else {
      return new nh.weather_reader_kafka.model.avro.CurrentWeather.Builder(other);
    }
  }

  /**
   * Creates a new CurrentWeather RecordBuilder by copying an existing CurrentWeather instance.
   * @param other The existing instance to copy.
   * @return A new CurrentWeather RecordBuilder
   */
  public static nh.weather_reader_kafka.model.avro.CurrentWeather.Builder newBuilder(nh.weather_reader_kafka.model.avro.CurrentWeather other) {
    if (other == null) {
      return new nh.weather_reader_kafka.model.avro.CurrentWeather.Builder();
    } else {
      return new nh.weather_reader_kafka.model.avro.CurrentWeather.Builder(other);
    }
  }

  /**
   * RecordBuilder for CurrentWeather instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CurrentWeather>
    implements org.apache.avro.data.RecordBuilder<CurrentWeather> {

    private java.lang.CharSequence time;
    private double temperature;
    private double windspeed;
    private int winddirection;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(nh.weather_reader_kafka.model.avro.CurrentWeather.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.temperature)) {
        this.temperature = data().deepCopy(fields()[1].schema(), other.temperature);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.windspeed)) {
        this.windspeed = data().deepCopy(fields()[2].schema(), other.windspeed);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.winddirection)) {
        this.winddirection = data().deepCopy(fields()[3].schema(), other.winddirection);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing CurrentWeather instance
     * @param other The existing instance to copy.
     */
    private Builder(nh.weather_reader_kafka.model.avro.CurrentWeather other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.time)) {
        this.time = data().deepCopy(fields()[0].schema(), other.time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.temperature)) {
        this.temperature = data().deepCopy(fields()[1].schema(), other.temperature);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.windspeed)) {
        this.windspeed = data().deepCopy(fields()[2].schema(), other.windspeed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.winddirection)) {
        this.winddirection = data().deepCopy(fields()[3].schema(), other.winddirection);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.lang.CharSequence getTime() {
      return time;
    }


    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public nh.weather_reader_kafka.model.avro.CurrentWeather.Builder setTime(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.time = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public nh.weather_reader_kafka.model.avro.CurrentWeather.Builder clearTime() {
      time = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'temperature' field.
      * @return The value.
      */
    public double getTemperature() {
      return temperature;
    }


    /**
      * Sets the value of the 'temperature' field.
      * @param value The value of 'temperature'.
      * @return This builder.
      */
    public nh.weather_reader_kafka.model.avro.CurrentWeather.Builder setTemperature(double value) {
      validate(fields()[1], value);
      this.temperature = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'temperature' field has been set.
      * @return True if the 'temperature' field has been set, false otherwise.
      */
    public boolean hasTemperature() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'temperature' field.
      * @return This builder.
      */
    public nh.weather_reader_kafka.model.avro.CurrentWeather.Builder clearTemperature() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'windspeed' field.
      * @return The value.
      */
    public double getWindspeed() {
      return windspeed;
    }


    /**
      * Sets the value of the 'windspeed' field.
      * @param value The value of 'windspeed'.
      * @return This builder.
      */
    public nh.weather_reader_kafka.model.avro.CurrentWeather.Builder setWindspeed(double value) {
      validate(fields()[2], value);
      this.windspeed = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'windspeed' field has been set.
      * @return True if the 'windspeed' field has been set, false otherwise.
      */
    public boolean hasWindspeed() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'windspeed' field.
      * @return This builder.
      */
    public nh.weather_reader_kafka.model.avro.CurrentWeather.Builder clearWindspeed() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'winddirection' field.
      * @return The value.
      */
    public int getWinddirection() {
      return winddirection;
    }


    /**
      * Sets the value of the 'winddirection' field.
      * @param value The value of 'winddirection'.
      * @return This builder.
      */
    public nh.weather_reader_kafka.model.avro.CurrentWeather.Builder setWinddirection(int value) {
      validate(fields()[3], value);
      this.winddirection = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'winddirection' field has been set.
      * @return True if the 'winddirection' field has been set, false otherwise.
      */
    public boolean hasWinddirection() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'winddirection' field.
      * @return This builder.
      */
    public nh.weather_reader_kafka.model.avro.CurrentWeather.Builder clearWinddirection() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CurrentWeather build() {
      try {
        CurrentWeather record = new CurrentWeather();
        record.time = fieldSetFlags()[0] ? this.time : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.temperature = fieldSetFlags()[1] ? this.temperature : (java.lang.Double) defaultValue(fields()[1]);
        record.windspeed = fieldSetFlags()[2] ? this.windspeed : (java.lang.Double) defaultValue(fields()[2]);
        record.winddirection = fieldSetFlags()[3] ? this.winddirection : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CurrentWeather>
    WRITER$ = (org.apache.avro.io.DatumWriter<CurrentWeather>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CurrentWeather>
    READER$ = (org.apache.avro.io.DatumReader<CurrentWeather>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.time);

    out.writeDouble(this.temperature);

    out.writeDouble(this.windspeed);

    out.writeInt(this.winddirection);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.time = in.readString(this.time instanceof Utf8 ? (Utf8)this.time : null);

      this.temperature = in.readDouble();

      this.windspeed = in.readDouble();

      this.winddirection = in.readInt();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.time = in.readString(this.time instanceof Utf8 ? (Utf8)this.time : null);
          break;

        case 1:
          this.temperature = in.readDouble();
          break;

        case 2:
          this.windspeed = in.readDouble();
          break;

        case 3:
          this.winddirection = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










